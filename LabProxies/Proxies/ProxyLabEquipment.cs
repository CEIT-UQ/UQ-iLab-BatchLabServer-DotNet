//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3649
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.1432.
// 
namespace Library.LabEquipment.Proxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LabEquipmentServiceSoap", Namespace="http://ilab.uq.edu.au/")]
    public partial class LabEquipmentService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public AuthHeader AuthHeaderValue;
        
        private System.Threading.SendOrPostCallback GetLabEquipmentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeUntilReadyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartLabExecutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabExecutionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabExecutionResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelLabExecutionOperationCompleted;
        
        /// <remarks/>
        public LabEquipmentService() {
            this.Url = "http://localhost:8089/ILabEquipmentService.asmx";
        }
        
        /// <remarks/>
        public event GetLabEquipmentStatusCompletedEventHandler GetLabEquipmentStatusCompleted;
        
        /// <remarks/>
        public event GetTimeUntilReadyCompletedEventHandler GetTimeUntilReadyCompleted;
        
        /// <remarks/>
        public event ValidateCompletedEventHandler ValidateCompleted;
        
        /// <remarks/>
        public event StartLabExecutionCompletedEventHandler StartLabExecutionCompleted;
        
        /// <remarks/>
        public event GetLabExecutionStatusCompletedEventHandler GetLabExecutionStatusCompleted;
        
        /// <remarks/>
        public event GetLabExecutionResultsCompletedEventHandler GetLabExecutionResultsCompleted;
        
        /// <remarks/>
        public event CancelLabExecutionCompletedEventHandler CancelLabExecutionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/GetLabEquipmentStatus", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LabEquipmentStatus GetLabEquipmentStatus() {
            object[] results = this.Invoke("GetLabEquipmentStatus", new object[0]);
            return ((LabEquipmentStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabEquipmentStatus(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabEquipmentStatus", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public LabEquipmentStatus EndGetLabEquipmentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LabEquipmentStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabEquipmentStatusAsync() {
            this.GetLabEquipmentStatusAsync(null);
        }
        
        /// <remarks/>
        public void GetLabEquipmentStatusAsync(object userState) {
            if ((this.GetLabEquipmentStatusOperationCompleted == null)) {
                this.GetLabEquipmentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabEquipmentStatusOperationCompleted);
            }
            this.InvokeAsync("GetLabEquipmentStatus", new object[0], this.GetLabEquipmentStatusOperationCompleted, userState);
        }
        
        private void OnGetLabEquipmentStatusOperationCompleted(object arg) {
            if ((this.GetLabEquipmentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabEquipmentStatusCompleted(this, new GetLabEquipmentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/GetTimeUntilReady", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTimeUntilReady() {
            object[] results = this.Invoke("GetTimeUntilReady", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTimeUntilReady(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTimeUntilReady", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetTimeUntilReady(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeUntilReadyAsync() {
            this.GetTimeUntilReadyAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeUntilReadyAsync(object userState) {
            if ((this.GetTimeUntilReadyOperationCompleted == null)) {
                this.GetTimeUntilReadyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeUntilReadyOperationCompleted);
            }
            this.InvokeAsync("GetTimeUntilReady", new object[0], this.GetTimeUntilReadyOperationCompleted, userState);
        }
        
        private void OnGetTimeUntilReadyOperationCompleted(object arg) {
            if ((this.GetTimeUntilReadyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeUntilReadyCompleted(this, new GetTimeUntilReadyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/Validate", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Validation Validate(string xmlSpecification) {
            object[] results = this.Invoke("Validate", new object[] {
                        xmlSpecification});
            return ((Validation)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidate(string xmlSpecification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Validate", new object[] {
                        xmlSpecification}, callback, asyncState);
        }
        
        /// <remarks/>
        public Validation EndValidate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Validation)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAsync(string xmlSpecification) {
            this.ValidateAsync(xmlSpecification, null);
        }
        
        /// <remarks/>
        public void ValidateAsync(string xmlSpecification, object userState) {
            if ((this.ValidateOperationCompleted == null)) {
                this.ValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateOperationCompleted);
            }
            this.InvokeAsync("Validate", new object[] {
                        xmlSpecification}, this.ValidateOperationCompleted, userState);
        }
        
        private void OnValidateOperationCompleted(object arg) {
            if ((this.ValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompleted(this, new ValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/StartLabExecution", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExecutionStatus StartLabExecution(string xmlSpecification) {
            object[] results = this.Invoke("StartLabExecution", new object[] {
                        xmlSpecification});
            return ((ExecutionStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStartLabExecution(string xmlSpecification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StartLabExecution", new object[] {
                        xmlSpecification}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExecutionStatus EndStartLabExecution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExecutionStatus)(results[0]));
        }
        
        /// <remarks/>
        public void StartLabExecutionAsync(string xmlSpecification) {
            this.StartLabExecutionAsync(xmlSpecification, null);
        }
        
        /// <remarks/>
        public void StartLabExecutionAsync(string xmlSpecification, object userState) {
            if ((this.StartLabExecutionOperationCompleted == null)) {
                this.StartLabExecutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartLabExecutionOperationCompleted);
            }
            this.InvokeAsync("StartLabExecution", new object[] {
                        xmlSpecification}, this.StartLabExecutionOperationCompleted, userState);
        }
        
        private void OnStartLabExecutionOperationCompleted(object arg) {
            if ((this.StartLabExecutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartLabExecutionCompleted(this, new StartLabExecutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/GetLabExecutionStatus", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExecutionStatus GetLabExecutionStatus(int executionId) {
            object[] results = this.Invoke("GetLabExecutionStatus", new object[] {
                        executionId});
            return ((ExecutionStatus)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabExecutionStatus(int executionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabExecutionStatus", new object[] {
                        executionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExecutionStatus EndGetLabExecutionStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExecutionStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabExecutionStatusAsync(int executionId) {
            this.GetLabExecutionStatusAsync(executionId, null);
        }
        
        /// <remarks/>
        public void GetLabExecutionStatusAsync(int executionId, object userState) {
            if ((this.GetLabExecutionStatusOperationCompleted == null)) {
                this.GetLabExecutionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabExecutionStatusOperationCompleted);
            }
            this.InvokeAsync("GetLabExecutionStatus", new object[] {
                        executionId}, this.GetLabExecutionStatusOperationCompleted, userState);
        }
        
        private void OnGetLabExecutionStatusOperationCompleted(object arg) {
            if ((this.GetLabExecutionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabExecutionStatusCompleted(this, new GetLabExecutionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/GetLabExecutionResults", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLabExecutionResults(int executionId) {
            object[] results = this.Invoke("GetLabExecutionResults", new object[] {
                        executionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLabExecutionResults(int executionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLabExecutionResults", new object[] {
                        executionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLabExecutionResults(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabExecutionResultsAsync(int executionId) {
            this.GetLabExecutionResultsAsync(executionId, null);
        }
        
        /// <remarks/>
        public void GetLabExecutionResultsAsync(int executionId, object userState) {
            if ((this.GetLabExecutionResultsOperationCompleted == null)) {
                this.GetLabExecutionResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabExecutionResultsOperationCompleted);
            }
            this.InvokeAsync("GetLabExecutionResults", new object[] {
                        executionId}, this.GetLabExecutionResultsOperationCompleted, userState);
        }
        
        private void OnGetLabExecutionResultsOperationCompleted(object arg) {
            if ((this.GetLabExecutionResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabExecutionResultsCompleted(this, new GetLabExecutionResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ilab.uq.edu.au/CancelLabExecution", RequestNamespace="http://ilab.uq.edu.au/", ResponseNamespace="http://ilab.uq.edu.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelLabExecution(int executionId) {
            object[] results = this.Invoke("CancelLabExecution", new object[] {
                        executionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelLabExecution(int executionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelLabExecution", new object[] {
                        executionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCancelLabExecution(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelLabExecutionAsync(int executionId) {
            this.CancelLabExecutionAsync(executionId, null);
        }
        
        /// <remarks/>
        public void CancelLabExecutionAsync(int executionId, object userState) {
            if ((this.CancelLabExecutionOperationCompleted == null)) {
                this.CancelLabExecutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelLabExecutionOperationCompleted);
            }
            this.InvokeAsync("CancelLabExecution", new object[] {
                        executionId}, this.CancelLabExecutionOperationCompleted, userState);
        }
        
        private void OnCancelLabExecutionOperationCompleted(object arg) {
            if ((this.CancelLabExecutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelLabExecutionCompleted(this, new CancelLabExecutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://ilab.uq.edu.au/", IsNullable=false)]
    public partial class AuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public string identifier;
        
        /// <remarks/>
        public string passKey;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    public partial class ExecutionStatus {
        
        /// <remarks/>
        public int ExecutionId;
        
        /// <remarks/>
        public int ExecuteStatus;
        
        /// <remarks/>
        public int ResultStatus;
        
        /// <remarks/>
        public int TimeRemaining;
        
        /// <remarks/>
        public string ErrorMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    public partial class Validation {
        
        /// <remarks/>
        public bool Accepted;
        
        /// <remarks/>
        public int ExecutionTime;
        
        /// <remarks/>
        public string ErrorMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ilab.uq.edu.au/")]
    public partial class LabEquipmentStatus {
        
        /// <remarks/>
        public bool Online;
        
        /// <remarks/>
        public string StatusMessage;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabEquipmentStatusCompletedEventHandler(object sender, GetLabEquipmentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabEquipmentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabEquipmentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LabEquipmentStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LabEquipmentStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetTimeUntilReadyCompletedEventHandler(object sender, GetTimeUntilReadyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeUntilReadyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeUntilReadyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void ValidateCompletedEventHandler(object sender, ValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Validation Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Validation)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void StartLabExecutionCompletedEventHandler(object sender, StartLabExecutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartLabExecutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartLabExecutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExecutionStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExecutionStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabExecutionStatusCompletedEventHandler(object sender, GetLabExecutionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabExecutionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabExecutionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExecutionStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExecutionStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void GetLabExecutionResultsCompletedEventHandler(object sender, GetLabExecutionResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabExecutionResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabExecutionResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    public delegate void CancelLabExecutionCompletedEventHandler(object sender, CancelLabExecutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.1432")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelLabExecutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelLabExecutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
